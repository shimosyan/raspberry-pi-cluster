name: Proxmox Deploy
on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/terraform**
      - tfaction-root.yaml
      - proxmox/**
      - aqua.yaml

concurrency:
  group: terraform-deploy # デプロイ先が1つしかないため repo 内で排他制御
  cancel-in-progress: false

permissions:
  id-token: write
  contents: read
  pull-requests: write
  actions: read # artifact を取得するために必要

jobs:
  terraform-apply:
    environment: production
    runs-on: ubuntu-latest

    env:
      PM_HTTP_HEADERS: CF-Access-Client-Id,${{ secrets.CF_ACCESS_CLIENT_ID }},CF-Access-Client-Secret,${{ secrets.CF_ACCESS_CLIENT_SECRET }}
      TFACTION_TARGET: proxmox
      TFACTION_WORKING_DIR: proxmox
      TFACTION_JOB_TYPE: terraform
      TFACTION_IS_APPLY: "true"

    outputs:
      lxc_vm_list: ${{ steps.extract.outputs.lxc_vm_list }}

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - id: app-token
        uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.1.1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - uses: aquaproj/aqua-installer@d1fe50798dbadd4eb5b98957290ca175f6b4870f # v4.0.2
        with:
          aqua_version: v2.53.9
        env:
          AQUA_GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      # GitHub Secrets を TFAction に渡す Action
      - uses: suzuki-shunsuke/tfaction/js@c7f4e11bb3b673f40c3894b7612669e149d7b452 # v1.19.2
        with:
          action: export-secrets
          secrets: ${{ toJSON(secrets) }}

      - run: tfaction get-or-create-drift-issue
        # CHECK: You can remove this step if you don't use drift detection
        shell: bash
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      # terraform init などの準備を行う Action
      - uses: suzuki-shunsuke/tfaction/setup@c7f4e11bb3b673f40c3894b7612669e149d7b452 # v1.19.2
        with:
          github_token: ${{ steps.app-token.outputs.token }}
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      # terraform apply を実行する Action
      - uses: suzuki-shunsuke/tfaction/apply@c7f4e11bb3b673f40c3894b7612669e149d7b452 # v1.19.2
        id: deploy
        with:
          github_token: ${{ steps.app-token.outputs.token }}
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      - uses: suzuki-shunsuke/tfaction/create-follow-up-pr@c7f4e11bb3b673f40c3894b7612669e149d7b452 # v1.19.2
        if: failure()
        with:
          github_token: ${{ steps.app-token.outputs.token }}

      - uses: suzuki-shunsuke/tfaction/update-drift-issue@c7f4e11bb3b673f40c3894b7612669e149d7b452 # v1.19.2
        # CHECK: You can remove this step if you don't use drift detection
        if: always()
        with:
          status: ${{job.status}}
          github_token: ${{ steps.app-token.outputs.token }}

      # Apply後にPRのplan artifactを取得（tfaction方式）
      - name: Download Plan Artifacts
        run: |
          echo "=== Downloading plan artifact using tfaction approach ==="

          # tfactionと同様の方法でPRのartifactを検索・ダウンロード

          # 1. 現在のコミットに関連するPRを取得
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "Searching for PR that introduced commit ${{ github.sha }}"

            # 最近マージされたPRの中から該当するものを検索
            PR_DATA=$(gh api repos/${{ github.repository }}/pulls \
              --method GET \
              --field state=closed \
              --field sort=updated \
              --field direction=desc \
              --field per_page=20 \
              --jq ".[] | select(.merge_commit_sha == \"${{ github.sha }}\" or .head.sha == \"${{ github.sha }}\")")

            if [ ! -z "$PR_DATA" ]; then
              PR_NUMBER=$(echo "$PR_DATA" | jq -r '.number')
              echo "Found PR #$PR_NUMBER for this commit"

              # そのPRのワークフロー実行を検索
              WORKFLOW_RUNS=$(gh api repos/${{ github.repository }}/actions/runs \
                --method GET \
                --field event=pull_request \
                --field status=completed \
                --field per_page=50 \
                --jq ".workflow_runs[] | select(.pull_requests[]?.number == $PR_NUMBER and .name == \"terraform-pull-request\")")

              if [ ! -z "$WORKFLOW_RUNS" ]; then
                # 最新の成功したワークフロー実行を取得
                RUN_ID=$(echo "$WORKFLOW_RUNS" | jq -r 'select(.conclusion == "success") | .id' | head -1)

                if [ ! -z "$RUN_ID" ]; then
                  echo "Found successful PR workflow run: $RUN_ID"

                  # artifactの存在確認
                  ARTIFACT_EXISTS=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts \
                    --jq ".artifacts[] | select(.name == \"terraform_plan_json_proxmox\" and .expired == false)")

                  if [ ! -z "$ARTIFACT_EXISTS" ]; then
                    echo "✅ Found terraform plan artifact in run $RUN_ID"

                    mkdir -p ./plan-artifacts

                    # artifactをダウンロード
                    gh run download $RUN_ID \
                      --name terraform_plan_json_proxmox \
                      --dir ./plan-artifacts

                    echo "✅ Successfully downloaded plan artifact"
                  else
                    echo "❌ No terraform plan artifact found in run $RUN_ID"
                  fi
                else
                  echo "❌ No successful workflow run found for PR #$PR_NUMBER"
                fi
              else
                echo "❌ No terraform-pull-request workflow runs found for PR #$PR_NUMBER"
              fi
            else
              echo "❌ No PR found for commit ${{ github.sha }}"
            fi
          else
            echo "❌ Not a main branch push event"
          fi

          # ダウンロード結果の確認
          if [ -d "./plan-artifacts" ] && [ -f "./plan-artifacts/tfplan.json" ]; then
            echo "✅ Plan JSON file successfully downloaded"
            ls -la ./plan-artifacts/
          else
            echo "⚠️ Plan artifact download failed or incomplete"
          fi
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        continue-on-error: true

      # ダウンロード結果の詳細確認
      - name: Verify Plan Artifact
        run: |
          echo "=== Verifying downloaded plan artifact ==="

          if [ -f "./plan-artifacts/tfplan.json" ]; then
            echo "✅ Plan JSON file found"
            echo "File size: $(wc -c < ./plan-artifacts/tfplan.json) bytes"
            echo "File content preview:"
            head -20 ./plan-artifacts/tfplan.json
          else
            echo "❌ Plan JSON file not found"
            echo "Available files in plan-artifacts:"
            ls -la ./plan-artifacts/ 2>/dev/null || echo "Directory does not exist"

            # フォールバック: 最新のartifactを検索
            echo "=== Fallback: Searching for any recent terraform plan artifact ==="
            gh api repos/${{ github.repository }}/actions/artifacts \
              --jq '.artifacts[] | select(.name == "terraform_plan_json_proxmox" and .expired == false) | {id: .id, workflow_run_id: .workflow_run.id, created_at: .created_at}' \
              | head -5
          fi
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      # Plan JSONからLXC VM IDを抽出（従来の方法の代替）
      - name: Extract Created LXC VM ID
        id: extract
        run: |
          echo "=== Extracting LXC VM IDs from Plan Artifacts ==="

          PLAN_JSON_FILE="./plan-artifacts/tfplan.json"

          if [ -f "$PLAN_JSON_FILE" ]; then
            echo "✅ Found plan JSON artifact: $PLAN_JSON_FILE"

            # Plan JSONから作成予定だったLXCリソースを抽出
            PLANNED_LXC_CREATES=$(jq -r '
              .resource_changes[]?
              | select(.type == "proxmox_lxc" and (.change.actions[] == "create"))
              | {
                  address: .address,
                  vmid: .change.after.vmid,
                  hostname: (.change.after.hostname // "unknown")
                }
            ' "$PLAN_JSON_FILE")

            echo "Planned LXC creations from artifact:"
            echo "$PLANNED_LXC_CREATES"

            if [ ! -z "$PLANNED_LXC_CREATES" ]; then
              # 既存の形式と同じ format: vmid:resource_name
              LXC_VM_LIST=$(echo "$PLANNED_LXC_CREATES" | jq -r '"\(.vmid):\(.address | sub("proxmox_lxc\\."; ""))"' | tr '\n' ',' | sed -e 's/,$//')

              echo "✅ LXC VM List from artifact: $LXC_VM_LIST"
              echo "lxc_vm_list=$LXC_VM_LIST" >> "$GITHUB_OUTPUT"

              # 詳細情報をログ出力
              echo "=== Created LXC Details ==="
              echo "$PLANNED_LXC_CREATES" | jq -r '"VM ID: \(.vmid), Resource: \(.address), Hostname: \(.hostname)"'

              exit 0
            else
              echo "ℹ️ No LXC creation found in plan artifact"
            fi
          else
            echo "⚠️ Plan JSON artifact not found, falling back to stdout parsing"
          fi

          # フォールバック: 従来のstdout解析方法
          echo "=== Fallback: Using stdout parsing ==="
          DEPLOY_RESULT="${{ steps.deploy.outputs.stdout }}"
          EXTRACT_RESULT=$(echo "$DEPLOY_RESULT" | grep -E 'proxmox_lxc\..+?: Creation complete after .+? \[id=.+?\]' || true)

          echo "Stdout extraction result:"
          echo "$EXTRACT_RESULT"
          echo ""

          if [ ! -z "$EXTRACT_RESULT" ]; then
            LXC_VM_ID_RES_ID=$(echo "$EXTRACT_RESULT" | sed -e 's/^proxmox_lxc\.\([a-zA-Z0-9_-]\+\).\+\[id=.\+\/lxc\/\([0-9]\+\)\].*$/\2:\1/gi' )

            # e.g 100:sample1,102:sample2
            LXC_VM_LIST=$(echo "$LXC_VM_ID_RES_ID" |  tr '\n' ',' |  sed -e 's/,$/\n/g')
            echo "✅ LXC VM List from stdout: $LXC_VM_LIST"

            echo "lxc_vm_list=$(echo -n "$LXC_VM_LIST")" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "ℹ️ No new LXC containers detected"
          echo "lxc_vm_list=" >> "$GITHUB_OUTPUT"

  # Extract Create LXC で出力した lxc_vm_list に登録されているときだけ実行する
  ansible-for-proxmox-lxc:
    needs: terraform-apply # job.terraform-apply に依存するようにする
    if: needs.terraform-apply.outputs.lxc_vm_list != ''
    runs-on: [self-hosted, proxmox-ansible]

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Get Script List
        run: |
          HOST_FILE=$(ls -F ./host  | grep -v / | sed "s/*//g")
          CONTAINER_FILE=$(ls -F ./container  | grep -v / | sed "s/*//g")

          HOST_FILE_LIST=$(echo "$HOST_FILE" |  tr '\n' ',' |  sed -e 's/,$/\n/g')
          CONTAINER_FILE_LIST=$(echo "$CONTAINER_FILE" |  tr '\n' ',' |  sed -e 's/,$/\n/g')

          echo -n "HOST_FILE_LIST = $HOST_FILE_LIST"
          echo -n "CONTAINER_FILE_LIST = $CONTAINER_FILE_LIST"

          echo "HOST_FILE_LIST=$HOST_FILE_LIST" >> $GITHUB_ENV
          echo "CONTAINER_FILE_LIST=$CONTAINER_FILE_LIST" >> $GITHUB_ENV

        working-directory: scripts/lxc

      - name: Run Playbook
        run: |
          ansible-playbook playbook-proxmox-lxc.yaml --extra-vars 'lxc_vm_id="${{ env.LXC_VM_LIST }}" host_script_file="${{ env.HOST_FILE_LIST }}" container_script_file="${{ env.CONTAINER_FILE_LIST }}"'
        working-directory: ansible
        env:
          LXC_VM_LIST: ${{needs.terraform-apply.outputs.lxc_vm_list}}
