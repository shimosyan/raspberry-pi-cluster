name: Terraform Deploy
on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/pull-request.yaml
      - .github/workflows/terraform**
      - .github/workflows/wc-terraform**
      - tfaction-root.yaml
      - proxmox/**
      - aqua.yaml

concurrency:
  group: terraform-deploy # デプロイ先が1つしかないため repo 内で排他制御
  cancel-in-progress: false

permissions:
  id-token: write
  contents: read
  pull-requests: write
  actions: read # artifact を取得するために必要

env:
  TFACTION_TARGET: proxmox
  TFACTION_WORKING_DIR: proxmox
  TFACTION_JOB_TYPE: terraform
  TFACTION_IS_APPLY: "true"

jobs:
  terraform-apply:
    environment: production
    runs-on: ubuntu-latest

    env:
      PM_HTTP_HEADERS: CF-Access-Client-Id,${{ secrets.CF_ACCESS_CLIENT_ID }},CF-Access-Client-Secret,${{ secrets.CF_ACCESS_CLIENT_SECRET }}

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - id: app-token
        uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - uses: aquaproj/aqua-installer@ea518c135a02fc11ff8024364510c181a5c6b342 # v4.0.3
        with:
          aqua_version: v2.55.1
        env:
          AQUA_GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      # GitHub Secrets を TFAction に渡す Action
      - uses: suzuki-shunsuke/tfaction/js@ab77216aa7cdec60c57b71cf970d6492ac241b1c # v1.19.5
        with:
          action: export-secrets
          secrets: ${{ toJSON(secrets) }}

      - run: tfaction get-or-create-drift-issue
        # CHECK: You can remove this step if you don't use drift detection
        shell: bash
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      # terraform init などの準備を行う Action
      - uses: suzuki-shunsuke/tfaction/setup@ab77216aa7cdec60c57b71cf970d6492ac241b1c # v1.19.5
        with:
          github_token: ${{ steps.app-token.outputs.token }}
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      # terraform apply を実行する Action
      - uses: suzuki-shunsuke/tfaction/apply@ab77216aa7cdec60c57b71cf970d6492ac241b1c # v1.19.5
        id: deploy
        with:
          github_token: ${{ steps.app-token.outputs.token }}
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      - uses: suzuki-shunsuke/tfaction/create-follow-up-pr@ab77216aa7cdec60c57b71cf970d6492ac241b1c # v1.19.5
        if: failure()
        with:
          github_token: ${{ steps.app-token.outputs.token }}

      - uses: suzuki-shunsuke/tfaction/update-drift-issue@ab77216aa7cdec60c57b71cf970d6492ac241b1c # v1.19.5
        # CHECK: You can remove this step if you don't use drift detection
        if: always()
        with:
          status: ${{job.status}}
          github_token: ${{ steps.app-token.outputs.token }}

  extract-created-lxc:
    environment: production
    runs-on: ubuntu-latest

    outputs:
      lxc_vm_list: ${{ steps.extract.outputs.lxc_vm_list }}

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - id: app-token
        uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - uses: aquaproj/aqua-installer@ea518c135a02fc11ff8024364510c181a5c6b342 # v4.0.3
        with:
          aqua_version: v2.55.1
        env:
          AQUA_GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      # GitHub Secrets を TFAction に渡す Action
      - uses: suzuki-shunsuke/tfaction/js@ab77216aa7cdec60c57b71cf970d6492ac241b1c # v1.19.5
        with:
          action: export-secrets
          secrets: ${{ toJSON(secrets) }}

      # terraform init や必要な環境変数などの準備を行う Action
      - uses: suzuki-shunsuke/tfaction/setup@ab77216aa7cdec60c57b71cf970d6492ac241b1c # v1.19.5
        with:
          github_token: ${{ steps.app-token.outputs.token }}
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      # Apply後にPRのplan artifactを取得（JSON版）
      - name: Download Plan Artifact
        run: |
          echo "=== Downloading Plan Artifact from PR ==="

          # tfaction環境変数を使用
          echo "Configuration:"
          echo "  Branch: $CI_INFO_HEAD_REF"
          echo "  Target: $TFACTION_TARGET"
          echo "  Has PR: $CI_INFO_HAS_ASSOCIATED_PR"

          # 必須チェック
          if [ "$CI_INFO_HAS_ASSOCIATED_PR" != "true" ] || [ -z "$CI_INFO_HEAD_REF" ]; then
            echo "❌ No associated PR found or missing branch info"
            exit 1
          fi

          # plan workflow名を取得
          PLAN_WORKFLOW_NAME=$(yq eval '.plan_workflow_name' tfaction-root.yaml)

          # tfactionの実装をそのまま使用（JSON版）
          branch=$CI_INFO_HEAD_REF
          artifact_name=terraform_plan_json_${TFACTION_TARGET//\//__}

          echo "Searching for plan from branch '$branch'..."

          # 最新の成功したworkflow runを取得
          body=$(gh run list \
            --repo "${{ github.repository }}" \
            -w "$PLAN_WORKFLOW_NAME" \
            -b "$branch" \
            -L 1 \
            --json headSha,databaseId,conclusion \
            --jq '.[0]')

          if [ -z "$body" ] || [ "$body" = "null" ]; then
            echo "❌ No workflow runs found for branch '$branch'"
            exit 1
          fi

          run_id=$(echo "$body" | jq -r ".databaseId")
          conclusion=$(echo "$body" | jq -r ".conclusion")

          if [ "$conclusion" != "success" ]; then
            echo "❌ Workflow run $run_id was not successful: $conclusion"
            exit 1
          fi

          echo "✅ Found successful workflow run: $run_id"

          # JSON artifactをダウンロード
          mkdir -p ./plan-artifacts

          if gh run download \
            --repo "${{ github.repository }}" \
            -D "./plan-artifacts" \
            -n "$artifact_name" \
            "$run_id"; then

            echo "✅ Successfully downloaded plan artifact"

            # ファイル確認
            if [ -f "./plan-artifacts/tfplan.json" ]; then
              echo "✅ Plan JSON verified: $(wc -c < ./plan-artifacts/tfplan.json) bytes"
            else
              echo "❌ Expected tfplan.json not found"
              ls -la ./plan-artifacts/
              exit 1
            fi
          else
            echo "❌ Failed to download artifact: $artifact_name"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      # Plan JSONからLXC VM IDを抽出
      - name: Extract Created LXC VM ID
        id: extract
        run: |
          echo "=== Extracting LXC VM IDs from Plan Artifacts ==="

          if [ -f "./plan-artifacts/tfplan.json" ]; then
            echo "✅ Found plan JSON artifact: ./plan-artifacts/tfplan.json"

            # Plan JSONから新規作成されるLXCリソースを直接JSON配列として抽出
            echo "Analyzing plan for new LXC resources..."

            # デバッグ: まずリソース変更全体を確認
            echo "=== Resource changes in plan ==="
            jq '.resource_changes[] | select(.type == "proxmox_lxc") | {address: .address, actions: .change.actions}' "./plan-artifacts/tfplan.json" || echo "No LXC resources found"

            # JSON配列として直接作成
            LXC_VM_LIST=$(jq -c '
              [.resource_changes[]
              | select(.type == "proxmox_lxc" and (.change.actions[] == "create"))
              | {
                  id: (.change.after.vmid | tostring),
                  resource: (.address | sub("proxmox_lxc\\."; "") | sub("\\[.*\\]"; ""))
                }]
            ' "./plan-artifacts/tfplan.json")

            # 空配列チェック
            if [ "$LXC_VM_LIST" = "[]" ] || [ -z "$LXC_VM_LIST" ]; then
              echo "ℹ️ No new LXC containers found in plan artifact"
              echo "lxc_vm_list=[]" >> "$GITHUB_OUTPUT"
            else
              echo "🆕 New LXC containers found:"
              echo "$LXC_VM_LIST" | jq -r '.[] | "- VM ID: \(.id), Resource: \(.resource)"'

              echo "✅ New LXC VM List: $LXC_VM_LIST"
              echo "lxc_vm_list=$LXC_VM_LIST" >> "$GITHUB_OUTPUT"
            fi

          else
            echo "❌ Plan JSON artifact not found"
            echo "lxc_vm_list=[]" >> "$GITHUB_OUTPUT"
            exit 1
          fi


  # Extract Create LXC で出力した lxc_vm_list に登録されているときだけ実行する
  ansible-for-proxmox-lxc:
    needs:
      - terraform-apply
      - extract-created-lxc
    if: needs.extract-created-lxc.outputs.lxc_vm_list != '[]' && needs.extract-created-lxc.outputs.lxc_vm_list != ''
    runs-on: [self-hosted, proxmox-ansible]

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Get Script List
        id: get-script-list
        run: |
          HOST_FILE=$(ls -F ./host  | grep -v / | sed "s/*//g")
          CONTAINER_FILE=$(ls -F ./container  | grep -v / | sed "s/*//g")

          HOST_FILE_LIST=$(echo "$HOST_FILE" |  tr '\n' ',' |  sed -e 's/,$/\n/g')
          CONTAINER_FILE_LIST=$(echo "$CONTAINER_FILE" |  tr '\n' ',' |  sed -e 's/,$/\n/g')

          echo -n "HOST_FILE_LIST = $HOST_FILE_LIST"
          echo -n "CONTAINER_FILE_LIST = $CONTAINER_FILE_LIST"

          echo "HOST_FILE_LIST=$HOST_FILE_LIST" >> $GITHUB_OUTPUT
          echo "CONTAINER_FILE_LIST=$CONTAINER_FILE_LIST" >> $GITHUB_OUTPUT

        working-directory: scripts/lxc

      - name: Run Playbook
        run: |
          ansible-playbook playbook-proxmox-lxc.yaml --extra-vars 'lxc_vm_id="${{ env.LXC_VM_LIST }}" host_script_file="${{ env.HOST_FILE_LIST }}" container_script_file="${{ env.CONTAINER_FILE_LIST }}"'
        working-directory: ansible
        env:
          LXC_VM_LIST: ${{needs.extract-created-lxc.outputs.lxc_vm_list}}
          HOST_FILE_LIST: ${{steps.get-script-list.outputs.HOST_FILE_LIST}}
          CONTAINER_FILE_LIST: ${{steps.get-script-list.outputs.CONTAINER_FILE_LIST}}

  success:
    needs:
      - terraform-apply
      - extract-created-lxc
      - ansible-for-proxmox-lxc
    if: ${{ always() }}
    runs-on: ubuntu-latest

    steps:
      - name: Check job result
        run: |
          RESULT="${{ needs.terraform-apply.result }}"
          if [[ $RESULT != "success" && $RESULT != "skipped" ]]; then
            echo "This workflow failed or was cancelled!"
            exit 1
          fi

          RESULT="${{ needs.extract-created-lxc.result }}"
          if [[ $RESULT != "success" && $RESULT != "skipped" ]]; then
            echo "This workflow failed or was cancelled!"
            exit 1
          fi

          RESULT="${{ needs.ansible-for-proxmox-lxc.result }}"
          if [[ $RESULT != "success" && $RESULT != "skipped" ]]; then
            echo "This workflow failed or was cancelled!"
            exit 1
          fi

          echo "Success!!"
          exit 0
