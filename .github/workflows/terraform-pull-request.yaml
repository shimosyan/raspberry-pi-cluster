name: terraform-pull-request

on:
  pull_request:
    branches:
      - main
    paths:
      - .github/workflows/terraform**
      - tfaction-root.yaml
      - proxmox/**
      - aqua.yaml

concurrency:
  group: ${{ github.workflow }}-terraform-${{ github.ref }}  # デプロイしないため PR レベルの排他制御
  cancel-in-progress: true # PR の更新があった場合は前のジョブをキャンセルする

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform-plan:
    runs-on: ubuntu-latest

    env:
      PM_HTTP_HEADERS: CF-Access-Client-Id,${{ secrets.CF_ACCESS_CLIENT_ID }},CF-Access-Client-Secret,${{ secrets.CF_ACCESS_CLIENT_SECRET }}
      TFACTION_TARGET: proxmox
      TFACTION_WORKING_DIR: proxmox
      TFACTION_JOB_TYPE: terraform

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - id: app-token
        uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.1.1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - uses: aquaproj/aqua-installer@d1fe50798dbadd4eb5b98957290ca175f6b4870f # v4.0.2
        with:
          aqua_version: v2.53.9
        env:
          AQUA_GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      - run: github-comment exec -- github-comment hide
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      # GitHub Secrets を TFAction に渡す Action
      - uses: suzuki-shunsuke/tfaction/js@c7f4e11bb3b673f40c3894b7612669e149d7b452 # v1.19.2
        with:
          action: export-secrets
          secrets: ${{ toJSON(secrets) }}

      # terraform init などの準備を行う Action
      - uses: suzuki-shunsuke/tfaction/setup@c7f4e11bb3b673f40c3894b7612669e149d7b452 # v1.19.2
        with:
          github_token: ${{ steps.app-token.outputs.token }}
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      # terraform fmt 等を実行する Action
      - uses: suzuki-shunsuke/tfaction/test@c7f4e11bb3b673f40c3894b7612669e149d7b452 # v1.19.2
        with:
          github_token: ${{ steps.app-token.outputs.token }}
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      # terraform plan を実行する Action
      - uses: suzuki-shunsuke/tfaction/plan@c7f4e11bb3b673f40c3894b7612669e149d7b452 # v1.19.2
        id: plan
        with:
          github_token: ${{ steps.app-token.outputs.token }}
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}


      # Plan結果から作成予定のLXCリソースを抽出（deploy時のロジックと同等）
      - name: Extract Planned LXC VM Creation
        id: extract_planned_lxc
        run: |
          PLAN_JSON="${{ steps.plan.outputs.plan_json_path }}"

          cat ${PLAN_JSON}

          if [ -f "$PLAN_JSON" ]; then
            echo "=== Analyzing planned LXC resources ==="

            # proxmox_lxc リソースで action が "create" のものを抽出
            PLANNED_LXC_CREATES=$(jq -r '
              .resource_changes[]? 
              | select(.type == "proxmox_lxc" and (.change.actions[] == "create"))
              | {
                  address: .address,
                  vmid: .change.after.vmid,
                  hostname: (.change.after.hostname // "unknown")
                }
            ' "$PLAN_JSON")

            echo "Planned LXC creations:"
            echo "$PLANNED_LXC_CREATES"

            if [ ! -z "$PLANNED_LXC_CREATES" ]; then
              # deploy時と同じ形式で VM ID と Resource ID のリストを作成
              # 形式: vmid:resource_name,vmid:resource_name
              LXC_VM_LIST=$(echo "$PLANNED_LXC_CREATES" | jq -r '"\(.vmid):\(.address | sub("proxmox_lxc\\."; ""))"' | tr '\n' ',' | sed -e 's/,$//')
              
              echo "Planned LXC VM List: $LXC_VM_LIST"
              echo "lxc_vm_list=$LXC_VM_LIST" >> "$GITHUB_OUTPUT"
              
              # 詳細情報も出力
              echo "=== Planned LXC Details ==="
              echo "$PLANNED_LXC_CREATES" | jq -r '"VM ID: \(.vmid), Resource: \(.address), Hostname: \(.hostname)"'
            else
              echo "No LXC creation planned"
              echo "lxc_vm_list=" >> "$GITHUB_OUTPUT"
            fi
            
            # その他のproxmox_lxcリソースの変更も確認
            echo "=== Other LXC Changes ==="
            jq -r '
              .resource_changes[]? 
              | select(.type == "proxmox_lxc" and (.change.actions[] != "create"))
              | "Action: \(.change.actions | join(",")), Resource: \(.address), VM ID: \(.change.before.vmid // .change.after.vmid // "unknown")"
            ' "$PLAN_JSON" || echo "No other LXC changes"
            
          else
            echo "Plan JSON file not found: $PLAN_JSON"
            echo "lxc_vm_list=" >> "$GITHUB_OUTPUT"
          fi


  success:
    needs: terraform-plan
    if: ${{ always() }}
    runs-on: ubuntu-latest

    steps:
      - name: Check job result
        run: |
          RESULT="${{ needs.terraform-plan.result }}"
          if [[ $RESULT != "success" && $RESULT != "skipped" ]]; then
            echo "This workflow failed or was cancelled!"
            exit 1
          fi

          echo "Success!!"
          exit 0
